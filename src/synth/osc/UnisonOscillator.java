package synth.osc;

import net.beadsproject.beads.core.AudioContext;
import net.beadsproject.beads.core.UGen;
import net.beadsproject.beads.data.Buffer;

public class UnisonOscillator extends UGen {

    /** The array of frequencies of individual oscillators. */
    private float[] frequency;

    /** The array of gains of individual oscillators. */
    private float[] gains;

    /** The array of current positions of individual oscillators. */
    private float[] pointl;
    private float[] pointr;
    /** The array of increment rates of individual oscillators, given their frequencies. */
    private double[] increment;

    /** The buffer used by all oscillators. */
    private Buffer buffer;

    /** The number of oscillators. */
    private int numOscillators;

    /** The sample rate and master gain of the OscillatorBank. */
    private float gain;

    private boolean randomPhaseOffset = true;

    /**
     * Instantiates a new UnisonOscillator.
     *
     * @param context the AudioContext.
     * @param buffer the buffer used as a lookup table by the oscillators.
     * @param numOscillators the number of oscillators.
     */
    public UnisonOscillator(AudioContext context, Buffer buffer, int numOscillators) {
        super(context, 2);
        this.buffer = buffer;
        setNumOscillators(numOscillators);
        gain = 1f / (float)numOscillators;
    }


    /**
     * Sets the number of oscillators.
     *
     * @param numOscillators the new number of oscillators.
     */
    public void setNumOscillators(int numOscillators) {
        this.numOscillators = numOscillators;
        float[] old = frequency;
        frequency = new float[numOscillators];
        increment = new double[numOscillators];
        int min = 0;
        if(old != null) min = Math.min(frequency.length, old.length);
        for(int i = 0; i < min; i++) {
            frequency[i] = old[i];
            increment[i] = frequency[i] / context.getSampleRate();
        }
        for(int i = min; i < frequency.length; i++) {
            frequency[i] = 0f;
            increment[i] = frequency[i] / context.getSampleRate();
        }
        old = gains;
        gains = new float[numOscillators];
        for(int i = 0; i < min; i++) {
            gains[i] = old[i];
        }
        for(int i = min; i < gains.length; i++) {
            gains[i] = 1f;
        }
        old = pointl;
        pointl = new float[numOscillators];
        for(int i = 0; i < min; i++) {
            pointl[i] = old[i];
        }
        for(int i = min; i < pointl.length; i++) {
            pointl[i] = (float)(Math.random() * 2*Math.PI);
        }
        old = pointr;
        pointr = new float[numOscillators];
        for(int i = 0; i < min; i++) {
            pointr[i] = old[i];
        }
        for(int i = min; i < pointr.length; i++) {
            pointr[i] = (float)(Math.random() * 2*Math.PI);
        }

    }

    /**
     * Returns true, when phase should be randomised for each new voice
     * @return random phase offset flag
     */
    public boolean isRandomPhaseOffset() {
        return randomPhaseOffset;
    }

    /**
     * Sets of unsets the random phase offset flag
     * @param randomPhaseOffset new random phase offset flag
     */
    public void setRandomPhaseOffset(boolean randomPhaseOffset) {
        this.randomPhaseOffset = randomPhaseOffset;
    }

    /**
     * Sets the frequencies and gains of all oscillators from an array freqsGains[][] where freqsGains[i][0] gives the
     * ith frequency, and freqsGains[i][1] gives the ith gain. This is the format generated by the SpectralPeaks FeatureExtractor.
     *
     * @param freqsGains
     */
    public void setFrequenciesAndGains(float[][] freqsGains) {
        for(int i = 0; i < numOscillators; i++) {
            if(i < freqsGains.length) {
                frequency[i] = Math.abs(freqsGains[i][0]);
                this.gains[i] = freqsGains[i][1];
            } else {
                frequency[i] = 0f;
            }
            increment[i] = frequency[i] / context.getSampleRate();
        }
    }

    /**
     * Sets the frequencies of all oscillators.
     *
     * @param frequencies the new frequencies.
     */
    public void setFrequencies(float[] frequencies) {
        for(int i = 0; i < numOscillators; i++) {
            if(i < frequencies.length) {
                frequency[i] = Math.abs(frequencies[i]);
            } else {
                frequency[i] = 0f;
            }
            increment[i] = frequency[i] / context.getSampleRate();
        }
    }

    /**
     * Gets the array of frequencies.
     * @return array of frequencies.
     */
    public float[] getFrequencies() {
        return frequency;
    }

    /**
     * Sets the gains of all oscillators.
     *
     * @param gains the new gains.
     */
    public void setGains(float[] gains) {
        for(int i = 0; i < numOscillators; i++) {
            if(i < gains.length) {
                this.gains[i] = gains[i];
            } else {
                this.gains[i] = 0f;
            }
        }
    }
    /**
     * Gets the array of gains.
     * @return array of gains.
     */
    public float[] getGains() {
        return gains;
    }

    /* (non-Javadoc)
     * @see com.olliebown.beads.core.UGen#calculateBuffer()
     */
    @Override
    public void calculateBuffer() {
        zeroOuts();
        for(int i = 0; i < bufferSize; i++) {
            for(int j = 0; j < numOscillators; j++) {
                // step forward in phase (in [0,1])
                pointl[j] = (float)(pointl[j] + increment[j]) % 1f;
                pointr[j] = (float)(pointr[j] + increment[j]) % 1f;
                bufOut[0][i] += gains[j] * buffer.getValueFraction(pointl[j]);
                bufOut[1][i] += gains[j] * buffer.getValueFraction(pointr[j]);
            }
        }
    }


}